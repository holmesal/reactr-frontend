// Generated by CoffeeScript 1.6.2
(function() {
  define(['jquery', 'underscore', 'backbone', 'socketio', 'play/models/controlModel', 'play/collections/controls', 'play/views/controls/switch', 'play/views/controls/button', 'play/views/controls/touchpad'], function($, _, Backbone, io, ControlModel, ControlsCollection, SwitchView, ButtonView, TouchpadView) {
    var ControllerModel;

    ControllerModel = Backbone.Model.extend({
      pollInterval: 100,
      initialize: function() {
        console.log('new controller model!');
        this.lastSent = Date.now();
        return console.log(this.lastSent);
      },
      fetchData: function() {
        var butt, swit, touch,
          _this = this;

        swit = new ControlModel({
          viewProto: SwitchView,
          value: 0,
          icon: 'icon-magnet',
          name: 'my-switch',
          'name-display': 'My Switch'
        });
        butt = new ControlModel({
          viewProto: ButtonView,
          type: 'button',
          icon: 'icon-arrow-up',
          name: 'my-button',
          'name-display': 'My Button'
        });
        touch = new ControlModel({
          viewProto: TouchpadView,
          type: 'touchpad',
          icon: 'icon-rocket',
          name: 'my-touchpad',
          'name-display': 'Touch Me'
        });
        this.collection = new ControlsCollection([swit, butt, touch]);
        this.collection.on('change', function() {
          return _this.checkTime();
        });
        this.trigger('controller:load');
        return this.socketize();
      },
      socketize: function() {
        this.socket = io.connect('http://api.reactr.co');
        console.log(this.socket);
        return this.collection.socket = this.socket;
      },
      checkTime: function() {
        if (Date.now() - this.lastSent > this.pollInterval) {
          this.lastSent = Date.now();
          return this.emit();
        } else {
          return console.log('skipping');
        }
      },
      emit: function() {
        var data;

        data = this.collection.toJSON();
        console.log('sending!');
        return this.socket.emit('data', data);
      }
    });
    return ControllerModel;
  });

}).call(this);
